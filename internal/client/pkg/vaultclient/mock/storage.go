// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/client/pkg/vaultclient/interface.go

// Package vaultclient is a generated GoMock package.
package vaultclient

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vaultdata "github.com/shreyner/gophkeeper/internal/client/pkg/vaultdata"
)

// MockVClient is a mock of VClient interface.
type MockVClient struct {
	ctrl     *gomock.Controller
	recorder *MockVClientMockRecorder
}

// MockVClientMockRecorder is the mock recorder for MockVClient.
type MockVClientMockRecorder struct {
	mock *MockVClient
}

// NewMockVClient creates a new mock instance.
func NewMockVClient(ctrl *gomock.Controller) *MockVClient {
	mock := &MockVClient{ctrl: ctrl}
	mock.recorder = &MockVClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVClient) EXPECT() *MockVClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockVClient) Check(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockVClientMockRecorder) Check(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockVClient)(nil).Check), ctx)
}

// Login mocks base method.
func (m *MockVClient) Login(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockVClientMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockVClient)(nil).Login), ctx, login, password)
}

// VaultCreate mocks base method.
func (m *MockVClient) VaultCreate(ctx context.Context, encryptedVault []byte, s3URL string) (*vaultdata.VaultClientSyncResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VaultCreate", ctx, encryptedVault, s3URL)
	ret0, _ := ret[0].(*vaultdata.VaultClientSyncResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VaultCreate indicates an expected call of VaultCreate.
func (mr *MockVClientMockRecorder) VaultCreate(ctx, encryptedVault, s3URL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VaultCreate", reflect.TypeOf((*MockVClient)(nil).VaultCreate), ctx, encryptedVault, s3URL)
}

// VaultDelete mocks base method.
func (m *MockVClient) VaultDelete(ctx context.Context, ID string, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VaultDelete", ctx, ID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// VaultDelete indicates an expected call of VaultDelete.
func (mr *MockVClientMockRecorder) VaultDelete(ctx, ID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VaultDelete", reflect.TypeOf((*MockVClient)(nil).VaultDelete), ctx, ID, version)
}

// VaultDownload mocks base method.
func (m *MockVClient) VaultDownload(ctx context.Context, url string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VaultDownload", ctx, url)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VaultDownload indicates an expected call of VaultDownload.
func (mr *MockVClientMockRecorder) VaultDownload(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VaultDownload", reflect.TypeOf((*MockVClient)(nil).VaultDownload), ctx, url)
}

// VaultSync mocks base method.
func (m *MockVClient) VaultSync(ctx context.Context, vaultSync []vaultdata.VaultSyncVersion) ([]vaultdata.VaultSyncData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VaultSync", ctx, vaultSync)
	ret0, _ := ret[0].([]vaultdata.VaultSyncData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VaultSync indicates an expected call of VaultSync.
func (mr *MockVClientMockRecorder) VaultSync(ctx, vaultSync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VaultSync", reflect.TypeOf((*MockVClient)(nil).VaultSync), ctx, vaultSync)
}

// VaultUpdate mocks base method.
func (m *MockVClient) VaultUpdate(ctx context.Context, ID string, version int, encryptedVault []byte) (*vaultdata.VaultClientSyncResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VaultUpdate", ctx, ID, version, encryptedVault)
	ret0, _ := ret[0].(*vaultdata.VaultClientSyncResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VaultUpdate indicates an expected call of VaultUpdate.
func (mr *MockVClientMockRecorder) VaultUpdate(ctx, ID, version, encryptedVault interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VaultUpdate", reflect.TypeOf((*MockVClient)(nil).VaultUpdate), ctx, ID, version, encryptedVault)
}

// VaultUpload mocks base method.
func (m *MockVClient) VaultUpload(ctx context.Context, r io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VaultUpload", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VaultUpload indicates an expected call of VaultUpload.
func (mr *MockVClientMockRecorder) VaultUpload(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VaultUpload", reflect.TypeOf((*MockVClient)(nil).VaultUpload), ctx, r)
}
