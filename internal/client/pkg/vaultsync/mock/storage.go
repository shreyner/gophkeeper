// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/client/pkg/vaultsync/interface.go

// Package vaultsync is a generated GoMock package.
package vaultsync

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vaultsync "github.com/shreyner/gophkeeper/internal/client/pkg/vaultsync"
)

// MockDataSyncer is a mock of DataSyncer interface.
type MockDataSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockDataSyncerMockRecorder
}

// MockDataSyncerMockRecorder is the mock recorder for MockDataSyncer.
type MockDataSyncerMockRecorder struct {
	mock *MockDataSyncer
}

// NewMockDataSyncer creates a new mock instance.
func NewMockDataSyncer(ctrl *gomock.Controller) *MockDataSyncer {
	mock := &MockDataSyncer{ctrl: ctrl}
	mock.recorder = &MockDataSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSyncer) EXPECT() *MockDataSyncerMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockDataSyncer) GetID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockDataSyncerMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockDataSyncer)(nil).GetID))
}

// GetIsDelete mocks base method.
func (m *MockDataSyncer) GetIsDelete() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsDelete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsDelete indicates an expected call of GetIsDelete.
func (mr *MockDataSyncerMockRecorder) GetIsDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsDelete", reflect.TypeOf((*MockDataSyncer)(nil).GetIsDelete))
}

// GetIsNew mocks base method.
func (m *MockDataSyncer) GetIsNew() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsNew")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsNew indicates an expected call of GetIsNew.
func (mr *MockDataSyncerMockRecorder) GetIsNew() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsNew", reflect.TypeOf((*MockDataSyncer)(nil).GetIsNew))
}

// GetIsUpdate mocks base method.
func (m *MockDataSyncer) GetIsUpdate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsUpdate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsUpdate indicates an expected call of GetIsUpdate.
func (mr *MockDataSyncerMockRecorder) GetIsUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsUpdate", reflect.TypeOf((*MockDataSyncer)(nil).GetIsUpdate))
}

// GetS3URL mocks base method.
func (m *MockDataSyncer) GetS3URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetS3URL indicates an expected call of GetS3URL.
func (mr *MockDataSyncerMockRecorder) GetS3URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3URL", reflect.TypeOf((*MockDataSyncer)(nil).GetS3URL))
}

// GetVaultID mocks base method.
func (m *MockDataSyncer) GetVaultID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVaultID indicates an expected call of GetVaultID.
func (mr *MockDataSyncerMockRecorder) GetVaultID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultID", reflect.TypeOf((*MockDataSyncer)(nil).GetVaultID))
}

// GetVersion mocks base method.
func (m *MockDataSyncer) GetVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockDataSyncerMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockDataSyncer)(nil).GetVersion))
}

// IsNeedSync mocks base method.
func (m *MockDataSyncer) IsNeedSync() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNeedSync")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNeedSync indicates an expected call of IsNeedSync.
func (mr *MockDataSyncerMockRecorder) IsNeedSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNeedSync", reflect.TypeOf((*MockDataSyncer)(nil).IsNeedSync))
}

// MockStorageSyncer is a mock of StorageSyncer interface.
type MockStorageSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageSyncerMockRecorder
}

// MockStorageSyncerMockRecorder is the mock recorder for MockStorageSyncer.
type MockStorageSyncerMockRecorder struct {
	mock *MockStorageSyncer
}

// NewMockStorageSyncer creates a new mock instance.
func NewMockStorageSyncer(ctrl *gomock.Controller) *MockStorageSyncer {
	mock := &MockStorageSyncer{ctrl: ctrl}
	mock.recorder = &MockStorageSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageSyncer) EXPECT() *MockStorageSyncerMockRecorder {
	return m.recorder
}

// ConfirmDeleteAfterSyncByID mocks base method.
func (m *MockStorageSyncer) ConfirmDeleteAfterSyncByID(data vaultsync.DataSyncer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmDeleteAfterSyncByID", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmDeleteAfterSyncByID indicates an expected call of ConfirmDeleteAfterSyncByID.
func (mr *MockStorageSyncerMockRecorder) ConfirmDeleteAfterSyncByID(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmDeleteAfterSyncByID", reflect.TypeOf((*MockStorageSyncer)(nil).ConfirmDeleteAfterSyncByID), data)
}

// CreateDataStorage mocks base method.
func (m *MockStorageSyncer) CreateDataStorage(externalID string, version int, data interface{}, s3URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataStorage", externalID, version, data, s3URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDataStorage indicates an expected call of CreateDataStorage.
func (mr *MockStorageSyncerMockRecorder) CreateDataStorage(externalID, version, data, s3URL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataStorage", reflect.TypeOf((*MockStorageSyncer)(nil).CreateDataStorage), externalID, version, data, s3URL)
}

// DeleteDataStorage mocks base method.
func (m *MockStorageSyncer) DeleteDataStorage(externalID string, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataStorage", externalID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataStorage indicates an expected call of DeleteDataStorage.
func (mr *MockStorageSyncerMockRecorder) DeleteDataStorage(externalID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataStorage", reflect.TypeOf((*MockStorageSyncer)(nil).DeleteDataStorage), externalID, version)
}

// DeserializeFromVault mocks base method.
func (m *MockStorageSyncer) DeserializeFromVault(arg0 []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeserializeFromVault", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeserializeFromVault indicates an expected call of DeserializeFromVault.
func (mr *MockStorageSyncerMockRecorder) DeserializeFromVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeserializeFromVault", reflect.TypeOf((*MockStorageSyncer)(nil).DeserializeFromVault), arg0)
}

// GetKind mocks base method.
func (m *MockStorageSyncer) GetKind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKind")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKind indicates an expected call of GetKind.
func (mr *MockStorageSyncerMockRecorder) GetKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKind", reflect.TypeOf((*MockStorageSyncer)(nil).GetKind))
}

// LoadForSync mocks base method.
func (m *MockStorageSyncer) LoadForSync() ([]vaultsync.DataSyncer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadForSync")
	ret0, _ := ret[0].([]vaultsync.DataSyncer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadForSync indicates an expected call of LoadForSync.
func (mr *MockStorageSyncerMockRecorder) LoadForSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadForSync", reflect.TypeOf((*MockStorageSyncer)(nil).LoadForSync))
}

// SerializeToVault mocks base method.
func (m *MockStorageSyncer) SerializeToVault(data interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializeToVault", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerializeToVault indicates an expected call of SerializeToVault.
func (mr *MockStorageSyncerMockRecorder) SerializeToVault(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeToVault", reflect.TypeOf((*MockStorageSyncer)(nil).SerializeToVault), data)
}

// SetConflictFlag mocks base method.
func (m *MockStorageSyncer) SetConflictFlag(ID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConflictFlag", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConflictFlag indicates an expected call of SetConflictFlag.
func (mr *MockStorageSyncerMockRecorder) SetConflictFlag(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConflictFlag", reflect.TypeOf((*MockStorageSyncer)(nil).SetConflictFlag), ID)
}

// UpdateAfterSyncByID mocks base method.
func (m *MockStorageSyncer) UpdateAfterSyncByID(data vaultsync.DataSyncer, externalID string, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAfterSyncByID", data, externalID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAfterSyncByID indicates an expected call of UpdateAfterSyncByID.
func (mr *MockStorageSyncerMockRecorder) UpdateAfterSyncByID(data, externalID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAfterSyncByID", reflect.TypeOf((*MockStorageSyncer)(nil).UpdateAfterSyncByID), data, externalID, version)
}

// UpdateDataStorage mocks base method.
func (m *MockStorageSyncer) UpdateDataStorage(externalID string, version int, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataStorage", externalID, version, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataStorage indicates an expected call of UpdateDataStorage.
func (mr *MockStorageSyncerMockRecorder) UpdateDataStorage(externalID, version, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataStorage", reflect.TypeOf((*MockStorageSyncer)(nil).UpdateDataStorage), externalID, version, data)
}
